pipeline {
  agent { label 'Slave' }
  environment {
    AWS_ACCOUNT_ID     = "178112661675"
    AWS_DEFAULT_REGION = "eu-north-1"
    // IMAGE_REPO_NAME    = "vegero-tg-ecr"
    IMAGE_REPO_NAME    = "testrepo"
    IMAGE_TAG          = "latest"
    REPOSITORY_URI     = "\${AWS_ACCOUNT_ID}.dkr.ecr.\${AWS_DEFAULT_REGION}.amazonaws.com/\${IMAGE_REPO_NAME}"
    CHART_S3           = "s3://vegero-helm-charts/stable/myapp/"
    CHART_REPO         = "stable-myapp"
    APP_NAME           = "my-webapp"
    // IS_MERGE           = """${sh(
    //                         returnStatus: true,
    //                         script: '''
    //                                   #parseWebHook(merge)
    //                                   WH_FILE=???
    //                                   STATE=`cat WH_FILE | jq -r '.pull_request.state'`
    //                                   MERGED=`cat WH_FILE | jq -r '.pull_request.merged'`
    //                                   echo state: $STATE , merged: $MERGED
    //                                   if [ $STATE == 'closed' ] && [ $MERGED == 'true' ];
    //                                   then
    //                                     exit 1
    //                                   else
    //                                     exit 0
    //                                   fi

    //                         '''
    //                     )}"""
    // IS_PUSH            = """${sh(
    //                         returnStatus: true,
    //                         script: '''
    //                                   #parseWebHook(merge)
    //                                   WH_FILE=???
    //                                   PUSHER=`cat WH_FILE | jq -r '.pusher'`
    //                                   echo pusher: $PUSHER
    //                                   if [[ $PUSHER != 'null' ]];
    //                                   then
    //                                     exit 1
    //                                   else
    //                                     #echo "NOT_PUSHED"
    //                                   fi
    //                         '''
    //                     )}"""
  }
  stages {
    stage('Delete workspace before build starts') {
        steps{
            echo 'Deleting workspace'
            deleteDir()
        }
    }
    stage('Checkout main') {
        steps{
          when {
            // anyOf {
            //   equals(actual: ${IS_MERGE}, expected: 1)
            //   equals(actual: ${IS_PUSH}, expected: 1)
            // }
            branch "main"
          }
          git branch: 'main', credentialsId: 'GitHub-SSH', url: 'git@github.com:vvvegero97/CI_CD_aws_eks.git'
          sh '''
              echo 'This is MAIN branch.'
              pwd
              ls -la
          '''        
        }
    }

    stage('Checkout dev') {
        steps{
          when {
            changeRequest target: "main"
          }
          git branch: 'dev', credentialsId: 'GitHub-SSH', url: 'git@github.com:vvvegero97/CI_CD_aws_eks.git'
          sh '''
              echo 'This is DEV branch.'
              pwd
              ls -la
          '''      
        }
    }

    // stage('Build docker image and run tests') {
    //     steps{
    //       when {
    //         changeset "./webapp/*"
    //         anyOf {
    //           branch "main"
    //           changeRequest target: "main"
    //         }
    //       }
    //       dir('webapp') {
    //           sh '''
    //               docker build -t \${AWS_ACCOUNT_ID}.dkr.ecr.\${AWS_DEFAULT_REGION}.amazonaws.com/\${IMAGE_REPO_NAME}:\${BUILD_NUMBER} .
    //           '''
    //       }
    //       sh '''
    //           ls -la 
    //           pwd
    //           helm version
    //           LINES=`docker images | grep \${BUILD_NUMBER} | grep \${IMAGE_REPO_NAME} | wc -l`
    //           if [[ $LINES -eq 1 ]]
    //           then
    //             echo "IMAGE IS HERE!!!!!"
    //           else
    //             echo "NO IMAGE?????"
    //           fi
    //       '''
    //     }
    // }

    // stage('Push image to ECR and delete Local image') {
    //     steps{
    //       when {
    //         changeset "./webapp/*"
    //         branch "dev"
    //         changeRequest target: "main"
    //       }
    //       sh '''
    //           aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin \${AWS_ACCOUNT_ID}.dkr.ecr.\${AWS_DEFAULT_REGION}.amazonaws.com
    //           docker push \${AWS_ACCOUNT_ID}.dkr.ecr.\${AWS_DEFAULT_REGION}.amazonaws.com/\${IMAGE_REPO_NAME}:${BUILD_NUMBER}
    //           echo Build number is \${BUILD_NUMBER}
    //           docker rmi \${AWS_ACCOUNT_ID}.dkr.ecr.\${AWS_DEFAULT_REGION}.amazonaws.com/\${IMAGE_REPO_NAME}:\${BUILD_NUMBER}
    //           docker image prune -f
    //       '''
    //     }
    // }

    // stage('Tag docker image, Push images to ECR and delete Local images') {
    //     steps{
    //       when {
    //         changeset "./webapp/*"
    //         branch "main"
    //         anyOf {
    //           equals(actual: ${IS_MERGE}, expected: 1)
    //           equals(actual: ${IS_PUSH}, expected: 1)
    //         }
    //       }
    //       sh '''
    //           docker image tag \${AWS_ACCOUNT_ID}.dkr.ecr.\${AWS_DEFAULT_REGION}.amazonaws.com/\${IMAGE_REPO_NAME}:\${BUILD_NUMBER} \${AWS_ACCOUNT_ID}.dkr.ecr.\${AWS_DEFAULT_REGION}.amazonaws.com/\${IMAGE_REPO_NAME}:\${IMAGE_TAG}
    //           aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin \${AWS_ACCOUNT_ID}.dkr.ecr.\${AWS_DEFAULT_REGION}.amazonaws.com
    //           docker push \${AWS_ACCOUNT_ID}.dkr.ecr.\${AWS_DEFAULT_REGION}.amazonaws.com/\${IMAGE_REPO_NAME}:${IMAGE_TAG}
    //           docker push \${AWS_ACCOUNT_ID}.dkr.ecr.\${AWS_DEFAULT_REGION}.amazonaws.com/\${IMAGE_REPO_NAME}:${BUILD_NUMBER}
    //           echo Build number is \${BUILD_NUMBER}
    //           docker rmi \${AWS_ACCOUNT_ID}.dkr.ecr.\${AWS_DEFAULT_REGION}.amazonaws.com/\${IMAGE_REPO_NAME}:\${IMAGE_TAG}
    //           docker rmi \${AWS_ACCOUNT_ID}.dkr.ecr.\${AWS_DEFAULT_REGION}.amazonaws.com/\${IMAGE_REPO_NAME}:\${BUILD_NUMBER}
    //           docker image prune -f
    //       '''
    //     }
    // }

    // stage('Push new Chart to Museum') {
    //   steps{
    //     when {
    //       branch "main"
    //       anyOf {
    //         changeset "./webapp/*"
    //         changeset "./app-chart/*"
    //       }
    //       allOf {
    //         equals(actual: ${IS_PUSH}, expected: 1)
    //         equals(actual: ${IS_MERGE}, expected: 1)
    //       }
    //     }
    //     dir ('app-chart'){
    //       sh '''
    //           echo "This is deploy script."
    //           echo "Chart bucket: \${CHART_S3}"
    //           echo "Contents of bucket: "
    //           aws s3 ls \${CHART_S3}
    //           helm s3 init s3://vegero-helm-charts/stable/myapp
    //           helm repo add stable-myapp s3://vegero-helm-charts/stable/myapp
    //           helm repo update #${CHART_REPO} s3://vegero-helm-charts/stable/myapp
    //           helm repo list
    //           sed -i "s/app-name/\${APP_NAME}/g" ./Chart.yaml
    //           cat ./Chart.yaml
    //           sed -i "s!sampleimage!${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG}!g" ./values.yaml
    //           sed -i "s/default/${BUILD_NUMBER}-app-ns/g" ./values.yaml
    //           cat ./values.yaml
    //       '''
    //     }
    //     sh '''
    //         helm package ./app-chart
    //         ls -la
    //         VERSION=`cat ./app-chart/Chart.yaml | grep version | awk '{print $3}'`
    //         helm s3 push ./${APP_NAME}-${VERSION}.tgz ${CHART_REPO} --force
    //         helm repo update && helm search repo ${CHART_REPO}             
    //     '''
    //   }
    // }
    // stage('Deploy new chart to AWS EKS'){
    //   steps{
    //     when {
    //       branch "main"
    //       anyOf {
    //         changeset "./webapp/*"
    //         changeset "./app-chart/*"
    //       }
    //       allOf {
    //         equals(actual: ${IS_PUSH}, expected: 1)
    //         equals(actual: ${IS_MERGE}, expected: 1)
    //       }
    //     }
    //     withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECRED')]) {
    //       sh 'cat $KUBECRED > ~/.kube/config'
    //     }
    //     sh '''
    //       helm version
    //       helm upgrade --install jenkins-webapp ${CHART_REPO}/${APP_NAME} --namespace default --cleanup-on-fail --wait
    //       echo "Deployment Successful !!!"
    //     '''
    //   }
    // }
  }
}
